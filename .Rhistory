tmpfile(fileext='.laz')
tempfile(fileext='.laz')
x = tempfile(fileext='.laz')
x
basename(x)
tools::file_ext(x)
#' compress_las('E:/my/las/dir/')
#' @export
# Check for LAX index files and create them as necessary. An earlier version
# of this function overwrote the original LAS resulting in possible corruption
# of the original file if the process was interrupted. This updated version uses
# temporary files to avoid this problem.
# Check for LAX index files and create them as necessary. An earlier version
# of this function overwrote the original LAS resulting in possible corruption
# of the original file if the process was interrupted. This updated version uses
# temporary files to avoid this problem.
check_for_lax = function(dir, rewrite=TRUE) {
#check inputs for validity
if(!rewrite %in% c(TRUE, FALSE)) stop('rewrite must be TRUE/FALSE')
laz = list.files(dir, pattern='.las|laz', full.names = TRUE)
if(length(laz) < 0) stop('no .LAS or .LAZ found in `dir`')
#check which files are missing indexes
lax = list.files(dir, pattern='.lax', full.names = TRUE)
needs_lax = !gsub('.las|.laz', '', laz) %in% gsub('.lax', '', lax)
cat(sum(needs_lax), 'files need indexing\n')
#return list of needed indexes if rewrite == false
if(!rewrite) return(laz[needs_lax])
# if rewrite == TRUE, add index
for(i in laz[needs_lax]) {
ext = tools::file_ext(i)
fn = tempfile(fileext=paste0('.',i))
cat('file', i, '\n...reading\n')
x = lidR::readLAS(i)
cat('...indexing\n')
lidR::writeLAS(x, fn, index=TRUE)
fn_index = gsub(ext, 'lax', fn)
orig_index = gsub('.laz|.las', '.lax', i)
if(file.exists(fn)) {
cat('...saving\n')
#copy temp files and cleanup
file.copy(fn_index, orig_index)
unlink(fn_index)
unlink(fn)
}  else {
warning('indexing file ', i, ' was unsuccessful')
}
}
}
#' @param dir path to a directory containing .LAS or .LAZ files to index
#' @param write_lax indicates if .lax file should be written (`TRUE`), or only
#' checked for (`FALSE`)
#' @examples
#' check_for_lax('E:/my/las/dir/')
#' @export
# Check for LAX index files and create them as necessary. An earlier version
# of this function overwrote the original LAS resulting in possible corruption
# of the original file if the process was interrupted. This updated version uses
# temporary files to avoid this problem.
check_for_lax = function(dir, write_lax=TRUE) {
#check inputs for validity
if(!write_lax %in% c(TRUE, FALSE)) stop('write_lax must be TRUE/FALSE')
laz = list.files(dir, pattern='.las|laz', full.names = TRUE)
if(length(laz) < 0) stop('no .LAS or .LAZ found in `dir`')
#check which files are missing indexes
lax = list.files(dir, pattern='.lax', full.names = TRUE)
needs_lax = !gsub('.las|.laz', '', laz) %in% gsub('.lax', '', lax)
cat(sum(needs_lax), 'files need indexing\n')
#return list of needed indexes if write_lax == false
if(!write_lax) return(laz[needs_lax])
# if write_lax == TRUE, add index
for(i in laz[needs_lax]) {
ext = tools::file_ext(i)
fn = tempfile(fileext=paste0('.',ext))
cat('file', i, '\n...reading\n')
x = lidR::readLAS(i)
cat('...indexing\n')
lidR::writeLAS(x, fn, index=TRUE)
fn_index = gsub(ext, 'lax', fn)
orig_index = gsub('.laz|.las', '.lax', i)
if(file.exists(fn)) {
cat('...saving\n')
#copy temp files and cleanup
file.copy(fn_index, orig_index)
unlink(fn_index)
unlink(fn)
}  else {
warning('indexing file ', i, ' was unsuccessful')
}
}
}
getwd()
setwd('GitHub/landecoutils/')
devtools::document()
rm(list=ls())
devtools::document()
